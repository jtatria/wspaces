% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util.R
\name{cooc_to_pmi}
\alias{cooc_to_pmi}
\title{(Positive) Pointwise mutual information.}
\usage{
cooc_to_pmi(m, rs = rowSums(m), cs = colSums(m), ppmi = TRUE,
  ow = FALSE)
}
\arguments{
\item{m}{A colun-oriented sparse matrix containing cooccurrence counts.}

\item{rs}{A numeric vector for row marginals (i.e. total DF for each term).}

\item{cs}{A numeric vector for column marginals (i.e. total TF for each corpus segment).}

\item{ppmi}{A logical value indicating whether negative values should be truncated to 0 (i.e.
compute PPMI instead of PMI). TRUE by default.}

\item{ow}{A logical value indicating wether the result should be destructively copied over
the input matrix. FALSE by default.}
}
\value{
An (column-stored sparse) matrix, isomorphic to m_ with the (P)PMI values for m_.
        If ow == TRUE, m_ is replaced with this value.
}
\description{
Compute a (P)PMI matrix from raw frequency counts, stored as a column-oriented sparse matrix.
}
\details{
The PMI value for each cell is equal to log( p(i,j) / p(i)p(j) ), i.e. the log of the observed
probability over the expected probability.

The PPMI variant adds 1 to this value in order to truncate all values to 0 and maintain
sparsity.

If rs or cs are given, the computation of the expected probabilities will use the values
contained in these vectors. This allows computing correct PMI values for partial cooccurrence
matrices, e.g. those built over a subsample of the entire corpus. If no marginal vectors are
given, these are computed from the row sums and column sums of the cooccurrence matrix,
respectively; this is equivalent to computing an 'empirical' PMI value from the given set of
observations, instead of computing it using the global corpus statistics.

The computation of observed probabilities is obviously always based on the total number of
observations in the given cooccurrence matrix, independently of the marginal vectors used for
the expected probabilities.

WARNING: In order to prevent a memory explosion, zero-values in the input matrix \emph{are never
calculated}, which has the numerical side-effect of replacing all -Inf values for the plain PMI
version with zeros. I have not yet thought of a better solution to distinguish -Infs from
actual 0s in the computed result.
}
